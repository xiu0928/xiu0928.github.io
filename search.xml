<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo安装教程</title>
      <link href="/2019/10/16/Hexo/"/>
      <url>/2019/10/16/Hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="安装hexo基础框架"><a href="#安装hexo基础框架" class="headerlink" title="安装hexo基础框架"></a>安装hexo基础框架</h2><pre class="line-numbers language-hexo"><code class="language-hexo">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><p>我是用windows系统，打开cmd然后进入到你的博客文件目录，输入以下命令</p><pre class="line-numbers language-hexo"><code class="language-hexo">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="网易云音乐外链"><a href="#网易云音乐外链" class="headerlink" title="网易云音乐外链"></a>网易云音乐外链</h2><pre class="line-numbers language-hexo"><code class="language-hexo">https://music.163.com/song/media/outer/url?id=484365611.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="清空git缓存"><a href="#清空git缓存" class="headerlink" title="清空git缓存"></a>清空git缓存</h2><pre class="line-numbers language-hexo"><code class="language-hexo">git rm -r --cached .git gc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="更换仓库："><a href="#更换仓库：" class="headerlink" title="更换仓库："></a>更换仓库：</h2><pre class="line-numbers language-hexo"><code class="language-hexo">git remote -vgit remote set-url origin 新仓库git remote set-url origin https://github.com/xiu0928/love.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看当前用户名和邮箱"><a href="#查看当前用户名和邮箱" class="headerlink" title="查看当前用户名和邮箱"></a>查看当前用户名和邮箱</h2><pre class="line-numbers language-hexo"><code class="language-hexo">git config user.namegit config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><pre class="line-numbers language-hexo"><code class="language-hexo">git config --global user.name "xiu0928"git config --global user.email "2011447576@qq.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h2><pre class="line-numbers language-hexo"><code class="language-hexo">git initgit add . git commit -m "first commit"git remote add origin https://自己的仓库url地址（上面有说到） 将本地的仓库关联到github上，git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新到GitHub上"><a href="#更新到GitHub上" class="headerlink" title="更新到GitHub上"></a>更新到GitHub上</h2><pre class="line-numbers language-hexo"><code class="language-hexo">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新到GitHub上-1"><a href="#更新到GitHub上-1" class="headerlink" title="更新到GitHub上"></a>更新到GitHub上</h2><pre class="line-numbers language-hexo"><code class="language-hexo">git clone https://github.com/xiu0928/xiu0928.github.io .deploy/xiu0928.github.iohexo generate   //生成静态文件cp -R public/* .deploy/xiu0928.github.io  //复制文件cd .deploy/xiu0928.github.io //切换目录git add .  //将需要提交的代码添加到暂存区git commit -m "update" //将暂存区内容提交给本地版本库git push //推送给远程服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> -Hexo -技术 -Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java总结</title>
      <link href="/2019/10/16/Java%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/16/Java%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Java开篇"><a href="#Java开篇" class="headerlink" title="Java开篇"></a>Java开篇</h2><p>javaSE（标准版） javaEE（企业版） javaME（微型版）</p><p>JDK（java开发工具包）JRE（java运行环境）IDE（集成开发环境）</p><p>Java SE（Java Platform，Standard Edition）。Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java Platform，Enterprise Edition（Java EE）提供基础。 J2SE就是做那种桌面安装程序样的，像QQ，WORD那种应用程序。<br>Java EE（Java Platform，Enterprise Edition）。这个版本以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web 2.0 应用程序。 J2EE 就是做基于Internet的应用程序，像选课系统，企业网站，银行系统之类的。<br>Java ME（Java Platform，Micro Edition）。这个版本以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。 J2ME就是做嵌入式系统开发的，像手机游戏之类的，像现在流行的Android操作系统。<br>JDK（Java Development Kit）。<br>JRE（Java Runtime Environment）<br>IDE（Ind Depvelopment Environment）</p><p>##一、面向对象</p><h3 id="类、对象、变量"><a href="#类、对象、变量" class="headerlink" title="类、对象、变量"></a>类、对象、变量</h3><p>（1）所有的Java程序都已类class为组织单元；类由属性和方法两部分组成<br>（2）先创建对象，再使用对象<br>（3）成员变量：类中定义，自动定义初始值<br>局部变量：类方法中定义（两变量同名，局部变量有更高的优先级）</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法是定义在java类中的一个用来初始化对象的方法，与类同名且没有返回值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> 构造方法名（）<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中构造方法名与类同名；当没有指定的构造方法时，系统会自动添加无参构造方法</p><h3 id="Static使用"><a href="#Static使用" class="headerlink" title="Static使用"></a>Static使用</h3><p>Static修饰的成员属于整个类，被类的所有对象共享。可通过使用类名直接访问静态成员，也可通过对象名<br>Static可以修饰变量、方法和代码块</p><h4 id="（1）Static使用之静态方法"><a href="#（1）Static使用之静态方法" class="headerlink" title="（1）Static使用之静态方法"></a>（1）Static使用之静态方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Helloworld</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Helloworld<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Helloworld demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helloworld</span><span class="token punctuation">;</span>    demo<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：静态方法中可以直接调用同类的静态成员，但不可以直接调用非静态成员；普通成员方法中可以直接访问同类的非静态变量和静态变量；静态方法中不能直接调用非静态成员方法</p><h4 id="（2）Static使用之静态初始化块"><a href="#（2）Static使用之静态初始化块" class="headerlink" title="（2）Static使用之静态初始化块"></a>（2）Static使用之静态初始化块</h4><p>静态初始化块在类加载时执行，且只会执行一次，同时静态初始化块只能给静态变量赋值，不能初始化普通成员</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Helloworld</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num1<span class="token punctuation">;</span><span class="token keyword">int</span> num2<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> num3<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    num1 <span class="token operator">=</span> <span class="token number">91</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法为num1赋值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num2 <span class="token operator">=</span> <span class="token number">74</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化块为num2赋值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num3 <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态初始化块为num3赋值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Helloworld hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>    Helloworld hello2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：静态初始化块为num3赋值<br>初始化块为num2赋值<br>构造方法为num1赋值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">91</span><span class="token number">74</span><span class="token number">83</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>初始化块为num2赋值<br>构造方法为num1赋值</p><h2 id="二、java面向对象的特性"><a href="#二、java面向对象的特性" class="headerlink" title="二、java面向对象的特性"></a>二、java面向对象的特性</h2><p>封装性：将类的某些信息隐藏在内部，通过类的方法来实现操作访问<br>步骤：<br>1 修改属性可见性；<br>2 创建getter\setter方法；<br>3在方法中加入属性控制语句</p><h3 id="1-静态内部类"><a href="#1-静态内部类" class="headerlink" title="(1)静态内部类:"></a>(1)静态内部类:</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SOuter</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SInner</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问外部类b"</span> <span class="token operator">+</span> SOuter<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问内部类b"</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//三行表示</span>    SInner sInner<span class="token punctuation">;</span>    sInner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sInner<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两行表示</span>    SInner si <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    si<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一行表示</span>    <span class="token keyword">new</span> <span class="token class-name">SInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)成员内部类：访问外部类时使用this指针<br>（3）方法内部类：只能在该方法中使用，且不能使用访问控制符和Static修饰符</p><h2 id="2-继承性"><a href="#2-继承性" class="headerlink" title="2. 继承性"></a>2. 继承性</h2><p>（1）一般形式：class 子类 extends 父类<br>（2）方法重写：子类对继承的父类方法不满意可以重写，调用时优先调用子类方法<br>（3）继承的初始化顺序：先初始化父类，再到子类；先执行初始化对象中属性，再执行狗在方法中的初始化<br>（4）父类对象–属性初始化–构造方法–子类对象–属性初始化–构造方法<br>（5）注意：如果子类构造方法中没有显示调用父类的构造方法，默认调用父类无参构造方法，若此父类没用无参的构造方法，则编译出错</p><p>多态性<br>引用多态：父类的引用可以指向本类的对象，也可指向子类的对象<br>方法多态：创建本类对象时，调用的方法为本类方法；创建子类对象时，调用的方法为子类的重写的方法或者继承的方法</p><h3 id="（1）抽象类"><a href="#（1）抽象类" class="headerlink" title="（1）抽象类"></a>（1）抽象类</h3><p>用关键字abstract修饰：抽象类只用声明不需要实现；包含抽象方法的类为抽象类；抽象类不能直接创建，可以定义引用变量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Telphone</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抽象方法没有方法体，以分号结束</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（2）接口（一种特殊的类，有全局变量和公共抽象方法组成）"><a href="#（2）接口（一种特殊的类，有全局变量和公共抽象方法组成）" class="headerlink" title="（2）接口（一种特殊的类，有全局变量和公共抽象方法组成）"></a>（2）接口（一种特殊的类，有全局变量和公共抽象方法组成）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 类名 <span class="token keyword">extends</span> 父类implemrnts 接口<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>……<span class="token punctuation">{</span>类体部分<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注：接口经常与匿名内部类配合使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iplay</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Iplay</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>People test<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“手机可以玩游戏”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于String的区别"><a href="#关于String的区别" class="headerlink" title="关于String的区别"></a>关于String的区别</h2><p>1.String、StringBuilder、StringBuffer的区别是什么，String为什么是不可变的？</p><h3 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h3><p>String类的底层源码中，通过final关键字修饰字符串数组，private final char value[]，所以是不可变的。StringBuffer和StringBuilder类是集成自 AbstractStringBuilder 类， AbstractStringBuilder 类中的变量没有用final关键字修饰，所以是可变的。</p><h3 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>String是不可变的，是常量，所以是线程安全的。StringBuilder和StringBuffer都继承自AbstractStringBuilder 类，StringBuffer对方法加了同步锁，所以是线程安全的，而StringBuilder没有加同步锁，所以是线程不安全的。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>对String类型进行改变是都会new一个新的string对象，并指向新的对象；</p><p>StringBuffer直接通过改变自身变量的值，StringBuilder相对能提升性能，但有线程不安全的情况。</p><h2 id="2-与-equals"><a href="#2-与-equals" class="headerlink" title="2.== 与 equals"></a>2.== 与 equals</h2><p>==用来判断两个对象是否相等，基础数据类型比较的是值是否相等。</p><p>没有重写对象的equals方法时，也是用来比较两个对象是否相等，重写equals方法可以比较内容相等，返回true</p><h2 id="3-try-catch-finally中finally是否一定执行"><a href="#3-try-catch-finally中finally是否一定执行" class="headerlink" title="3.try/catch/finally中finally是否一定执行"></a>3.try/catch/finally中finally是否一定执行</h2><p>在以下4种特殊情况下，finally块不会被执行:</p><p>在finally语句块中发生了异常。</p><p>在前面的代码中用了System.exit()退出程序。</p><p>程序所在的线程死亡。</p><p>关闭CPU。</p><h2 id="4-接口和抽象类的区别？"><a href="#4-接口和抽象类的区别？" class="headerlink" title="4.接口和抽象类的区别？"></a>4.接口和抽象类的区别？</h2><p>1.抽象类中可以实现方法，抽象接口不能实现方法（jdk1.8以后可以实现方法）；</p><p>2.接口中的变量默认是final类型，而抽象类不是；</p><p>3.类只能继承一个抽象类，而接口可以实现多个；</p><p>4.类继承接口需要实现所有方法，抽象类不需要；</p><h2 id="5-接口不能用new实例化"><a href="#5-接口不能用new实例化" class="headerlink" title="5.接口不能用new实例化"></a>5.接口不能用new实例化</h2><p>可以声明。必须引用一个实现该接口的对象抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</p><p>5.Arraylist 与 LinkedList 异同<br>安全性<br>ArrayList与LinkedList都是线程不安全的。</p><p>数据结构实现<br>ArryayList是基于Object数组，而LinkedList是基于双向循环链表（JDK1.6之前为循环链表，之后取消了循环）</p><p>插入删除的影响<br>ArrayList采用数组存储，插入删除受元素位置的影响；</p><p>LinkedList采用链表存储，插入删除不收元素位置影响；</p><p>访问元素<br>LinkedList 不支持高效的随机元素访问，而 ArrayList 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于get(int index)方法)。</p><p>实现了RandomAccess接口的list，优先选择普通for循环 ，其次foreach,未实现RandomAccess接口的list， 优先选择iterator遍历(foreach遍历底层也是通过iterator实现的)，大size的数据，千万不要使用普通for循环</p><h2 id="6-ArrayList-与-Vector-区别"><a href="#6-ArrayList-与-Vector-区别" class="headerlink" title="6.ArrayList 与 Vector 区别"></a>6.ArrayList 与 Vector 区别</h2><p>Vector中所有方法都是同步的，在多线程操作中，同步操作会耗费时间，而ArrayList是不需要同步的，在不需要考虑线程安全时可以使用。</p><h2 id="7-HashMap的底层实现"><a href="#7-HashMap的底层实现" class="headerlink" title="7.HashMap的底层实现"></a>7.HashMap的底层实现</h2><p>待补充完善</p><h2 id="8-HashSet-和-HashMap-区别"><a href="#8-HashSet-和-HashMap-区别" class="headerlink" title="8.HashSet 和 HashMap 区别"></a>8.HashSet 和 HashMap 区别</h2><p>HashMap实现Map接口，用来存储键值对，调用put方法添加元素，使用Key计算Hashcode，而HashSet实现Set接口，用来存储对象，调用add方法添加对象，使用对象计算hashcode，根据equals方法判断对象相等，执行效率的话，HashMap优与HashSet。</p><h2 id="9-ConcurrentHashMap-和-Hashtable-的区别"><a href="#9-ConcurrentHashMap-和-Hashtable-的区别" class="headerlink" title="9.ConcurrentHashMap 和 Hashtable 的区别"></a>9.ConcurrentHashMap 和 Hashtable 的区别</h2><p>ConcurrentHashMap 和 HashTable 的区别主要体现在实现线程安全的方式上不同。ConcurrentHashMap使用的是分段锁，HashTable使用的是同一把锁，因而在多线程并发中效率很低。</p><h2 id="10-多线程实现方式"><a href="#10-多线程实现方式" class="headerlink" title="10.多线程实现方式"></a>10.多线程实现方式</h2><p>1.继承Thread类，2.实现Runnable接口，3.基于线程池实现</p>]]></content>
      
      
      
        <tags>
            
            <tag> -java -技术 -总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础</title>
      <link href="/2019/10/16/SQL%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/16/SQL%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL-语法"><a href="#SQL-语法" class="headerlink" title="SQL 语法"></a>SQL 语法</h2><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><p>一个数据库通常包含一个或多个表。每个表由一个名字标识（例如“客户”或者“订单”）。表包含带有数据的记录（行）</p><h3 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h3><p>您需要在数据库上执行的大部分工作都由 SQL 语句完成。<br>下面的语句从表中选取 LastName 列的数据：<br><code>SELECT LastName FROM Persons</code><br>重要事项：SQL 对大小写不敏感！</p><h3 id="SQL-DML-和-DDL"><a href="#SQL-DML-和-DDL" class="headerlink" title="SQL DML 和 DDL"></a>SQL DML 和 DDL</h3><p>可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。<br>SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。</p><p>查询和更新指令构成了 SQL 的 DML 部分：</p><ul><li>SELECT - 从数据库表中获取数据</li><li>UPDATE - 更新数据库表中的数据</li><li>DELETE - 从数据库表中删除数据</li><li>INSERT INTO - 向数据库表中插入数据</li></ul><hr><p>SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。<br>SQL 中最重要的 DDL 语句:</p><hr><ul><li>CREATE DATABASE - 创建新数据库</li><li>ALTER DATABASE - 修改数据库</li><li>CREATE TABLE - 创建新表</li><li>ALTER TABLE - 变更（改变）数据库表</li><li>DROP TABLE - 删除表</li><li>CREATE INDEX - 创建索引（搜索键）</li><li>DROP INDEX - 删除索引</li></ul><hr><h2 id="SQL-SELECT-语句"><a href="#SQL-SELECT-语句" class="headerlink" title="SQL SELECT 语句"></a>SQL SELECT 语句</h2><p>SELECT 语句用于从表中选取数据。</p><p>结果被存储在一个结果表中（称为结果集）。</p><h3 id="SQL-SELECT-语法"><a href="#SQL-SELECT-语法" class="headerlink" title="SQL SELECT 语法"></a>SQL SELECT 语法</h3><p><code>SELECT 列名称 FROM 表名称</code><br>以及：<br><code>SELECT * FROM 表名称</code></p><h2 id="SQL-SELECT-DISTINCT-语句"><a href="#SQL-SELECT-DISTINCT-语句" class="headerlink" title="SQL SELECT DISTINCT 语句"></a>SQL SELECT DISTINCT 语句</h2><p>在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。</p><p>关键词 DISTINCT 用于返回唯一不同的值。<br><strong>语法：</strong><br><code>SELECT DISTINCT 列名称 FROM 表名称</code></p><h2 id="SQL-WHERE-子句"><a href="#SQL-WHERE-子句" class="headerlink" title="SQL WHERE 子句"></a>SQL WHERE 子句</h2><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。<br><strong>语法:</strong><br><code>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</code><br>下面的运算符可在 WHERE 子句中使用：</p><table><thead><tr><th>操作符</th><th>描述</th><th></th><th></th></tr></thead><tbody><tr><td>=</td><td>等于</td><td></td><td></td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td></td><td></td></tr><tr><td>&gt;</td><td>大于</td><td></td><td></td></tr><tr><td>&lt;</td><td>小于</td><td></td><td></td></tr><tr><td>&gt;=</td><td>大于等于</td><td></td><td></td></tr><tr><td>&lt;=</td><td>小于等于</td><td></td><td></td></tr><tr><td>BETWEEN</td><td>在某个范围内</td><td></td><td></td></tr><tr><td>LIKE</td><td>搜索某种模式</td><td></td><td></td></tr></tbody></table><p><strong>注释：</strong>在某些版本的 SQL 中，操作符 &lt;&gt; 可以写为 !=</p><h2 id="SQL-AND-amp-OR-运算符"><a href="#SQL-AND-amp-OR-运算符" class="headerlink" title="SQL AND &amp; OR 运算符"></a>SQL AND &amp; OR 运算符</h2><p>AND 和 OR 运算符用于基于一个以上的条件对记录进行过滤。<br>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。</p><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</p><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。<br><strong>AND 运算符实例</strong><br>使用 AND 来显示所有姓为 “Carter” 并且名为 “Thomas” 的人：<br><code>SELECT * FROM Persons WHERE FirstName=&#39;Thomas&#39; AND LastName=&#39;Carter&#39;</code><br><strong>OR 运算符实例</strong><br>使用 OR 来显示所有姓为 “Carter” 或者名为 “Thomas” 的人：<br><code>SELECT * FROM Persons WHERE firstname=&#39;Thomas&#39; OR lastname=&#39;Carter&#39;</code><br><strong>结合 AND 和 OR 运算符</strong><br>我们也可以把 AND 和 OR 结合起来（使用圆括号来组成复杂的表达式）:<br><code>SELECT * FROM Persons WHERE (FirstName=&#39;Thomas&#39; OR FirstName=&#39;William&#39;)AND LastName=&#39;Carter&#39;</code></p><h2 id="SQL-ORDER-BY-子句"><a href="#SQL-ORDER-BY-子句" class="headerlink" title="SQL ORDER BY 子句"></a>SQL ORDER BY 子句</h2><p><strong>ORDER BY 语句用于对结果集进行排序。</strong><br>ORDER BY 语句用于根据指定的列对结果集进行排序。</p><p>ORDER BY 语句默认按照升序对记录进行排序。</p><p>如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h3><p>以字母顺序显示公司名称：<br><code>SELECT Company, OrderNumber FROM Orders ORDER BY Company</code></p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h3><p>以字母顺序显示公司名称（Company），并以数字顺序显示顺序号（OrderNumber）：<br><code>SELECT Company, OrderNumber FROM Orders ORDER BY Company, OrderNumber</code></p><h2 id="SQL-INSERT-INTO-语句"><a href="#SQL-INSERT-INTO-语句" class="headerlink" title="SQL INSERT INTO 语句"></a>SQL INSERT INTO 语句</h2><p>INSERT INTO 语句用于向表格中插入新的行。<br><strong>语法</strong><br><code>INSERT INTO 表名称 VALUES (值1, 值2,....)</code><br>我们也可以指定所要插入数据的列：<br><code>INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)</code></p><h3 id="插入新的行"><a href="#插入新的行" class="headerlink" title="插入新的行"></a>插入新的行</h3><p><strong>“Persons” 表：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td></tr></tbody></table><p><strong>SQL 语句：</strong><br><code>INSERT INTO Persons VALUES (&#39;Gates&#39;, &#39;Bill&#39;, &#39;Xuanwumen 10&#39;, &#39;Beijing&#39;)</code><br><strong>结果：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td></tr><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr></tbody></table><h3 id="在指定的列中插入数据"><a href="#在指定的列中插入数据" class="headerlink" title="在指定的列中插入数据"></a>在指定的列中插入数据</h3><p><strong>“Persons” 表：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td></tr><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr></tbody></table><p><strong>SQL 语句：</strong><br><code>INSERT INTO Persons (LastName, Address) VALUES (&#39;Wilson&#39;, &#39;Champs-Elysees&#39;)</code><br><strong>结果：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td></tr><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td></td><td>Champs-Elysees</td><td></td></tr></tbody></table><h2 id="Update-语句"><a href="#Update-语句" class="headerlink" title="Update 语句"></a>Update 语句</h2><p>Update 语句用于修改表中的数据。<br><strong>语法：</strong><br><code>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</code></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>Person:</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td></td><td>Champs-Elysees</td><td></td></tr></tbody></table><p><strong>更新某一行中的一个列</strong><br>我们为 lastname 是 “Wilson” 的人添加 firstname：<br><code>UPDATE Person SET FirstName = &#39;Fred&#39; WHERE LastName = &#39;Wilson&#39;</code><br><strong>结果：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td>Fred</td><td>Champs-Elysees</td><td></td></tr></tbody></table><p><strong>更新某一行中的若干列</strong><br>我们会修改地址（address），并添加城市名称（city）：<br><code>UPDATE Person SET Address = &#39;Zhongshan 23&#39;, City = &#39;Nanjing&#39;WHERE LastName = &#39;Wilson&#39;</code><br><strong>结果：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td>Fred</td><td>Zhongshan 23</td><td>Nanjing</td></tr></tbody></table><h2 id="SQL-DELETE-语句"><a href="#SQL-DELETE-语句" class="headerlink" title="SQL DELETE 语句"></a>SQL DELETE 语句</h2><p>DELETE 语句用于删除表中的行。<br><strong>语法</strong><br><code>DELETE FROM 表名称 WHERE 列名称 = 值</code><br><strong>Person:</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td>Fred</td><td>Zhongshan 23</td><td>Nanjing</td></tr></tbody></table><p><strong>删除某行</strong><br>“Fred Wilson” 会被删除：<br><code>DELETE FROM Person WHERE LastName = &#39;Wilson&#39;</code><br><strong>结果:</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr></tbody></table><p><strong>删除所有行</strong><br>可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：<br><code>DELETE FROM table_name</code><br>或者：<br><code>DELETE * FROM table_name</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> -SQL -技术 -基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
