<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图书管理系统问题汇总</title>
      <link href="/2019/12/05/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2019/12/05/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JSTL标签引入失败"><a href="#1-JSTL标签引入失败" class="headerlink" title="1.    JSTL标签引入失败"></a>1.    JSTL标签引入失败</h2><p>解决:将JSTL Jar包导入到项目中</p><h2 id="2-使用JSTL服务器抛异常"><a href="#2-使用JSTL服务器抛异常" class="headerlink" title="2.    使用JSTL服务器抛异常"></a>2.    使用JSTL服务器抛异常</h2><p>解决: JSTL Jar中tld目录放到webroot/MATA-INF中</p><h2 id="3-数据库编码问题，网页取数据库前台显示乱码。"><a href="#3-数据库编码问题，网页取数据库前台显示乱码。" class="headerlink" title="3.    数据库编码问题，网页取数据库前台显示乱码。"></a>3.    数据库编码问题，网页取数据库前台显示乱码。</h2><p>解决:数据库编码与服务器编码统一</p><h2 id="4-图书借阅与归还问题"><a href="#4-图书借阅与归还问题" class="headerlink" title="4.    图书借阅与归还问题"></a>4.    图书借阅与归还问题</h2><p>问题描述:<br>同一本图书借出两次，第一次归还没问题，第二次归还在还书系统找不到该借书的信息，但数据库中该图书已经标识已经借出.</p><hr><p>解决:<br>借书系统所操作的数据是用户在前台收藏的图书，当在后台借阅后，当前收藏记录就删除了，而还书系统，所操作的数据也是收藏记录，收藏记录删除导致还书系统取不到借书数据，将还书系统对应的数据改为借书的记录。</p><h2 id="5-图书的重复借阅以及重复归还问题"><a href="#5-图书的重复借阅以及重复归还问题" class="headerlink" title="5.    图书的重复借阅以及重复归还问题"></a>5.    图书的重复借阅以及重复归还问题</h2><p>问题描述:<br>在借书系统中，当点击借阅后，在该页面刷新网页就会一直重复借阅，还书也是一样。如果图书管理员操作不当，刷新了当前网页，则图书就会出现重复借阅。</p><hr><p>解决:<br>在后端中，用户执行了借书操作，如果该图书借阅成功后，重新定向URL，并删除上一次借书的临时数据，则用户无论怎么执行刷新就只是获取借阅图书的信息而已。<br>还书也是该操作。</p><h2 id="6-上传图片到服务器"><a href="#6-上传图片到服务器" class="headerlink" title="6.上传图片到服务器"></a>6.上传图片到服务器</h2><p>问题描述:<br>上传服务器图片到服务器需要刷新img文件夹才能在页面上显示出来</p><hr><p>解决:<br>因为上传的路径为绝对路径，更改为相对路径即可<br><strong>代码：</strong><br><code>String path = request.getSession().getServletContext().getRealPath(&quot;assets/images/book&quot;);</code></p><h2 id="7-用ajax请求服务器返回json数据出错"><a href="#7-用ajax请求服务器返回json数据出错" class="headerlink" title="7.用ajax请求服务器返回json数据出错"></a>7.用ajax请求服务器返回json数据出错</h2><p>解决：因为没有正确的下载相应版本的jar包，有的jar包的版本之间是有依赖关系的<br>jar包：</p><ol><li>commons-beanutils-1.7.0.jar</li><li>commons-collections-3.2.1.jar</li><li>commons-lang-2.6.jar</li><li>commons-logging-1.1.3.jar</li><li>ezmorph-1.0.6.jar</li><li>json-lib-2.1-jdk15.jar</li></ol><hr><h2 id="8-判断用户是否登录"><a href="#8-判断用户是否登录" class="headerlink" title="8.判断用户是否登录"></a>8.判断用户是否登录</h2><p>解决:<br>在登录的时候，把用户的账号密码存储到Session里面，然后写一个拦截器，拦截需要登录才能进行请求的服务器。</p><h2 id="9-关于页面上登录判断的处理"><a href="#9-关于页面上登录判断的处理" class="headerlink" title="9.关于页面上登录判断的处理"></a>9.关于页面上登录判断的处理</h2><p>解决:<br>在访问页面的时候用ajax进行请求服务器，如果登录会返回用户的信息，<br>如果没登陆会返回为null。然后ajax拿到服务器返回的json数据。进行判断<br>如果有数据则显示登录用户的名字，如果没有数据则显示登录</p><h2 id="10-服务器访问数据库报错问题"><a href="#10-服务器访问数据库报错问题" class="headerlink" title="10.服务器访问数据库报错问题"></a>10.服务器访问数据库报错问题</h2><p>解决:<br>因为引用的jar包的版本与之对应的MySQL数据库的版本不一致，<br>5.0的jar包数据驱动是：<br><code>com.mysql.jdbc.Driver</code><br>8.0的jar包数据驱动是：<br><code>com.mysql.cj.jdbc.Driver</code></p><hr><h2 id="11-怎么判断管理员是锁屏和退出登录"><a href="#11-怎么判断管理员是锁屏和退出登录" class="headerlink" title="11.怎么判断管理员是锁屏和退出登录"></a>11.怎么判断管理员是锁屏和退出登录</h2><p>解决:<br>当管理员登录的时候会把账号和密码保存到session里面，锁屏则把保存session里面的密码清楚，退出登录则清空账号密码。<br>代码实现：</p><pre class="line-numbers language-jsp"><code class="language-jsp">Object admin = ((HttpServletRequest) request).getSession().getAttribute("admin");//取学号Object pwd = ((HttpServletRequest) request).getSession().getAttribute("pwd");//取密码if(admin!=null&&pwd!=null){//判断学号和密码是否为空    chain.doFilter(request, response);//放行}else if(admin!=null&&pwd==null){    ((HttpServletResponse) response).sendRedirect("/librarySystem/lockscreen.html");    //密码为空则跳转到锁屏页面}else{    ((HttpServletResponse) response).sendRedirect("/librarySystem/login.html");    //账号密码都为空跳转到登录页面}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> jsp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -jsp -bug -ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语法</title>
      <link href="/2019/10/22/SQL%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/10/22/SQL%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库基础语法"><a href="#1-数据库基础语法" class="headerlink" title="1.数据库基础语法"></a>1.数据库基础语法</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>create database 数据库名;</code></p><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p><code>drop database 数据库名;</code></p><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p><code>use 数据库名;</code></p><h2 id="2-表的约束"><a href="#2-表的约束" class="headerlink" title="2.表的约束"></a>2.表的约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p><code>primary key</code></p><h3 id="主键自增"><a href="#主键自增" class="headerlink" title="主键自增"></a>主键自增</h3><p><code>auto_increment primary key</code></p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>命名写法：<br><code>constraint 外键约束的名称</code><br><code>foreign key(teaid)//将从表中的teaid设为外键</code><br><code>references student(teaid);关联student表的teaid主键</code><br>增加外键约束<br><code>alter table 表名</code><br><code>add constraint 外键约束的名称</code><br><code>foreign key(teaid)//将从表中的teaid设为外键</code><br><code>references student(teaid);关联student表的teaid主键</code><br>不命名写法：<br><code>alter table 表名 add foreign key(外键) references 从表(外键);</code></p><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p><code>not null</code></p><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p><code>default 默认值</code></p><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p><code>unique</code></p><h2 id="3-操作表的结构"><a href="#3-操作表的结构" class="headerlink" title="3.操作表的结构"></a>3.操作表的结构</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><code>create table 表名(字段名1 类型1 约束,...);</code></p><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><p><code>rename table 旧表名 to 新表名</code></p><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p><code>alter table 表名 动作</code></p><h4 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h4><p>修改字段类型：<br><code>modify 字段名 新类型</code><br>修改字段名：<br><code>change 老字段名 新字段名 新字段类型</code><br>添加字段:<br><code>add 字段名 字段类型</code><br>删除字段:<br><code>drop 字段名</code></p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p><code>dorp table 表名</code></p><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><p><code>desc 表名;</code></p><h2 id="4-操作表的数据"><a href="#4-操作表的数据" class="headerlink" title="4.操作表的数据"></a>4.操作表的数据</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p><code>insert into 表名(字段一,...) values(值一,...);</code></p><h3 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h3><p><code>update 表名 set 字段一 = 值一,... where 条件</code></p><h3 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h3><p><code>delete from 表名 where 条件</code><br><strong>注意：先删除从表记录，再删除主表记录</strong></p><h3 id="清空语句"><a href="#清空语句" class="headerlink" title="清空语句"></a>清空语句</h3><p><code>delete from 表名</code><br><code>truncate table 表名</code><br><strong>区别：truncate将重置auto_increment不可恢复数据</strong></p><h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><p><code>select 字段名 聚合函数</code><br><code>from 表名</code><br><code>where 条件</code><br><code>order by 字段名 asc/desc</code><br><code>limit 字段名 限制行数</code><br><code>group by 字段名</code><br><code>having 条件 //主要解决条件语句不能用聚合函数问题</code></p><h3 id="常用模糊查询"><a href="#常用模糊查询" class="headerlink" title="常用模糊查询"></a>常用模糊查询</h3><p><code>where 字段名 like &#39;值&#39;</code></p><ul><li>* 任意字符串</li><li>% 表示任意长度的字符，0也是任意长度</li><li>_  表示只有一个字符</li></ul><hr><h3 id="常用聚合函数"><a href="#常用聚合函数" class="headerlink" title="常用聚合函数"></a>常用聚合函数</h3><table><thead><tr><th>sum（字段名）</th><th>求和</th></tr></thead><tbody><tr><td>max（字段名）</td><td>最大数</td></tr><tr><td>min（字段名）</td><td>最小值</td></tr><tr><td>avg（字段名）</td><td>平均数</td></tr><tr><td>count（字段名）</td><td>个数</td></tr></tbody></table><p><strong>count（字段名）和count（*）区别就是：</strong><br>count（字段名）如果字段有null值，则不计数</p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p><code>select 字段一，字段二，...from 表一 inner join 表二 on 条件;</code></p><h4 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h4><p><code>select 字段一，字段二，...from 表一 left join 表二 on 条件；</code></p><h4 id="右连接"><a href="#右连接" class="headerlink" title="右连接"></a>右连接</h4><p><code>select 字段一，字段二，...from 表一 right join 表二 on 条件；</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> -语法 -SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList总结</title>
      <link href="/2019/10/19/ArrayList%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/19/ArrayList%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="1-底层是利用（动态）数组形式实现-1-5"><a href="#1-底层是利用（动态）数组形式实现-1-5" class="headerlink" title="1.底层是利用（动态）数组形式实现 1.5"></a>1.底层是利用（动态）数组形式实现 1.5</h3><h3 id="2-如何构建一个ArrayList对象"><a href="#2-如何构建一个ArrayList对象" class="headerlink" title="2.如何构建一个ArrayList对象"></a>2.如何构建一个ArrayList对象</h3><p>无参构造方法    带默认容量的构造方法<br><code>List&lt;String&gt; list=new ArrayList&lt;String&gt;();</code></p><h3 id="3-常用方法"><a href="#3-常用方法" class="headerlink" title="3.常用方法"></a>3.常用方法</h3><p>增 add（E e）<br>删 remove（index）<br>改 set（index value）<br>查 get（index）<br>长度 size（）</p><h2 id="泛型："><a href="#泛型：" class="headerlink" title="泛型："></a>泛型：</h2><p>用来规定数据类型<br>注意：泛型 造型<br>在类或接口描述的时候 可以使用某种符号来表示一个未知的类型<br>在类型使用的时候 需要一个具体类型来代替<br>注意：泛型需要使用应用数据类型来代替<br>1.泛型类 2.泛型接口 3.泛型方法 4.方法参数泛型限制</p><h2 id="Vector类"><a href="#Vector类" class="headerlink" title="Vector类"></a>Vector类</h2><h3 id="1-是ArrayList集合早期版本"><a href="#1-是ArrayList集合早期版本" class="headerlink" title="1.是ArrayList集合早期版本"></a>1.是ArrayList集合早期版本</h3><p>线程同步 安全性高 效率</p><h3 id="2-扩容方式不同"><a href="#2-扩容方式不同" class="headerlink" title="2.扩容方式不同"></a>2.扩容方式不同</h3><p>2倍 可通过构造方法创建对象时修改这一机制</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -泛型 -Vector -ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set总结</title>
      <link href="/2019/10/19/Set%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/19/Set%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Collection    以value形式存在<br>Set    无序无重复</p><h3 id="1-具体实现类"><a href="#1-具体实现类" class="headerlink" title="1.具体实现类"></a>1.具体实现类</h3><p>HashSet<br>TreeSet</p><h3 id="2-基本的使用"><a href="#2-基本的使用" class="headerlink" title="2.基本的使用"></a>2.基本的使用</h3><h3 id="3-无序-无重复"><a href="#3-无序-无重复" class="headerlink" title="3.无序 无重复"></a>3.无序 无重复</h3><p>无序：我们使用集合存放的顺序 集合内取出来的顺序不一致<br>集合本身是有自己的算法排布顺序  hash算法</p><h3 id="HashSet-gt-（HashMap-数组-链表-散链表）"><a href="#HashSet-gt-（HashMap-数组-链表-散链表）" class="headerlink" title="HashSet---&gt;（HashMap 数组+链表 散链表）"></a>HashSet---&gt;（HashMap 数组+链表 散链表）</h3><h4 id="1-java-utill"><a href="#1-java-utill" class="headerlink" title="1.java.utill"></a>1.java.utill</h4><h4 id="2-如何创建对象-无参数-有参数"><a href="#2-如何创建对象-无参数-有参数" class="headerlink" title="2.如何创建对象 无参数 有参数"></a>2.如何创建对象 无参数 有参数</h4><p><code>HashSet&lt;String&gt; set =new HashSet&lt;String&gt;();</code></p><h4 id="3-集合容器的基本使用"><a href="#3-集合容器的基本使用" class="headerlink" title="3.集合容器的基本使用"></a>3.集合容器的基本使用</h4><ul><li>增    add(value)   addAall(collection c)   retainAll  removeAll  并集 交集 差集</li><li>删    boolean = remove(Objest)</li><li>改    没有</li><li>查    增强for循环集合遍历</li></ul><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>String v<span class="token operator">:</span>set<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//迭代器：</span>Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断下一个位置是否有元素</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String value <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map总结</title>
      <link href="/2019/10/19/Map%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/19/Map%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/</a></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>映射    通过某一个key可以直接定位到value值<br>存储的方式：键值对    存储   key-value<br>key无序无重复    value无序可重复</p><h2 id="map基本使用："><a href="#map基本使用：" class="headerlink" title="map基本使用："></a>map基本使用：</h2><p>HashMap<br>HashSet<br>Hashtable<br>##HashMap:</p><h3 id="1-包-java-util"><a href="#1-包-java-util" class="headerlink" title="1.包 java.util"></a>1.包 java.util</h3><h3 id="2-如何创建对象"><a href="#2-如何创建对象" class="headerlink" title="2.如何创建对象"></a>2.如何创建对象</h3><p>HashMap&lt;Integer,String&gt; hashmap = new HashMap&lt;Integer,String&gt;();</p><h3 id="3-基本方法"><a href="#3-基本方法" class="headerlink" title="3.基本方法"></a>3.基本方法</h3><table><thead><tr><th>增</th><th>put（key,value）存储一组映射关系 key-value</th></tr></thead><tbody><tr><td>删</td><td>E = remove（key;</td></tr><tr><td>改</td><td>replace(key,new value);</td></tr><tr><td>查</td><td>get(key);</td></tr></tbody></table><p>遍历    //获取map集合的全部key</p><pre class="line-numbers language-java"><code class="language-java">Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过迭代器去遍历keys</span>Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> it <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Integer key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>size();</p><h3 id="4-除了上面的几个常用的方法可以去api去看"><a href="#4-除了上面的几个常用的方法可以去api去看" class="headerlink" title="4.除了上面的几个常用的方法可以去api去看"></a>4.除了上面的几个常用的方法可以去api去看</h3><h3 id="5-map集合什么情况下用："><a href="#5-map集合什么情况下用：" class="headerlink" title="5.map集合什么情况下用："></a>5.map集合什么情况下用：</h3><h4 id="1-想要存储一组元素"><a href="#1-想要存储一组元素" class="headerlink" title="1.想要存储一组元素"></a>1.想要存储一组元素</h4><p>数组 or 集合    如果存储的元素以后长度不变用数组，不确定用集合</p><h4 id="2-如果发现长度以后不确定-–-gt-集合"><a href="#2-如果发现长度以后不确定-–-gt-集合" class="headerlink" title="2.如果发现长度以后不确定 –&gt;集合"></a>2.如果发现长度以后不确定 –&gt;集合</h4><table><thead><tr><th>List</th><th>Set</th><th>Map</th></tr></thead><tbody><tr><td>有序</td><td>无重复</td><td>k-v</td></tr><tr><td>ArrayList适合遍历</td><td>Hash性能高</td><td>Hash性能高</td></tr><tr><td>LinkedList适合插入删除</td><td>Tree希望自动去重和排序</td><td>Tree希望key自动排序</td></tr><tr><td>StackLIFO</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 函数</title>
      <link href="/2019/10/17/SQL%E5%87%BD%E6%95%B0/"/>
      <url>/2019/10/17/SQL%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="avg（）函数"><a href="#avg（）函数" class="headerlink" title="avg（）函数"></a>avg（）函数</h2><h3 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h3><p>AVG 函数返回数值列的平均值。NULL 值不包括在计算中。</p><h3 id="SQL-AVG-语法"><a href="#SQL-AVG-语法" class="headerlink" title="SQL AVG() 语法"></a>SQL AVG() 语法</h3><p><code>select avg(字段名)as 新字段名 from 表名;</code></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>我们拥有下面这个<code>stuinfo</code>表：</p><table><thead><tr><th>id</th><th>date</th><th>name</th><th>age</th><th>ach</th><th>tuition</th><th>sex</th></tr></thead><tbody><tr><td>1</td><td>2019-10-17 17:44:45</td><td>亚索</td><td>18</td><td>84</td><td>10600</td><td>男</td></tr><tr><td>2</td><td>2018-10-17 17:45:42</td><td>寒冰</td><td>16</td><td>95</td><td>10600</td><td>女</td></tr><tr><td>3</td><td>2019-08-01 17:45:34</td><td>布隆</td><td>10</td><td>84</td><td>10000</td><td>男</td></tr><tr><td>4</td><td>2019-01-17 17:46:42</td><td>劫</td><td>23</td><td>99</td><td>500</td><td>男</td></tr><tr><td>5</td><td>2019-10-13 17:46:52</td><td>小鱼儿</td><td>45</td><td>84</td><td>6000</td><td>女</td></tr></tbody></table><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h4><p>现在，我们希望计算 <code>age</code> 字段的平均值。</p><p>我们使用如下 SQL 语句：<br><code>select avg(age)as avgAge from stuinfo;</code><br>结果集类似这样：</p><table><thead><tr><th>avgAge</th></tr></thead><tbody><tr><td>22.4000</td></tr></tbody></table><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h4><p>现在，我们希望找到 <code>age</code> 值高于 <code>age</code> 平均值的客户。<br>我们使用如下 SQL 语句：<br><code>select name from stuinfo where age&gt;(select avg(age) from stuinfo);</code></p><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>劫</td></tr><tr><td>小鱼儿</td></tr></tbody></table><h2 id="count-语句"><a href="#count-语句" class="headerlink" title="count()语句"></a>count()语句</h2><p>COUNT() 函数返回匹配指定条件的行数。</p><h3 id="COUNT-column-name"><a href="#COUNT-column-name" class="headerlink" title="COUNT(column_name)"></a>COUNT(column_name)</h3><p>函数返回指定列的值的数目（NULL 不计入）：<br><strong>语法</strong><br><code>SELECT COUNT(column_name) FROM table_name</code></p><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT(*)"></a>COUNT(*)</h3><p>函数返回表中的记录数：<br><code>SELECT COUNT(*) FROM table_name</code></p><h3 id="COUNT-DISTINCT-column-name"><a href="#COUNT-DISTINCT-column-name" class="headerlink" title="COUNT(DISTINCT column_name)"></a>COUNT(DISTINCT column_name)</h3><p>函数返回指定列的不同值的数目：<br><code>SELECT COUNT(DISTINCT column_name) FROM table_name</code></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>我们拥有下面这个<code>stuinfo</code>表：</p><table><thead><tr><th>id</th><th>date</th><th>name</th><th>age</th><th>ach</th><th>tuition</th><th>sex</th></tr></thead><tbody><tr><td>1</td><td>2019-10-17 17:44:45</td><td>亚索</td><td>18</td><td>84</td><td>10600</td><td>男</td></tr><tr><td>2</td><td>2018-10-17 17:45:42</td><td>寒冰</td><td>16</td><td>95</td><td>10600</td><td>女</td></tr><tr><td>3</td><td>2019-08-01 17:45:34</td><td>布隆</td><td>10</td><td>84</td><td>10000</td><td>男</td></tr><tr><td>4</td><td>2019-01-17 17:46:42</td><td>劫</td><td>23</td><td>99</td><td>500</td><td>男</td></tr><tr><td>5</td><td>2019-10-13 17:46:52</td><td>小鱼儿</td><td>45</td><td>84</td><td>6000</td><td>女</td></tr></tbody></table><p>现在，我们希望计算学生 <code>tuition</code> 的10600学费总数。<br>我们使用如下 SQL 语句：<br><code>select count(tuition) as countTuition from stuinfo where tuition = 10600;</code><br>以上 SQL 语句的结果是 2，因为学生 tuition 共有 2 人：</p><table><thead><tr><th>countTuition</th></tr></thead><tbody><tr><td>2</td></tr></tbody></table><h4 id="SQL-COUNT-实例"><a href="#SQL-COUNT-实例" class="headerlink" title="SQL COUNT(*) 实例"></a>SQL COUNT(*) 实例</h4><p>如果我们省略 WHERE 子句，比如这样：<br><code>select count(*) as count from stuinfo;</code><br>结果集类似这样：</p><table><thead><tr><th>count</th></tr></thead><tbody><tr><td>5</td></tr></tbody></table><p>这是表中的总行数。</p><h4 id="SQL-COUNT-DISTINCT-column-name-实例"><a href="#SQL-COUNT-DISTINCT-column-name-实例" class="headerlink" title="SQL COUNT(DISTINCT column_name) 实例"></a>SQL COUNT(DISTINCT column_name) 实例</h4><p>现在，我们希望计算 “stuinfo” 表中不同成绩的数目。<br>我们使用如下 SQL 语句：<br><code>select count(distinct ach) as numAch from stuinfo;</code><br>结果集类似这样：</p><table><thead><tr><th>numAch</th></tr></thead><tbody><tr><td>3</td></tr></tbody></table><h2 id="max-函数"><a href="#max-函数" class="headerlink" title="max()函数"></a>max()函数</h2><p>MAX 函数返回一列中的最大值。NULL 值不包括在计算中。<br><strong>SQL MAX() 语法</strong><br><code>SELECT MAX(column_name) FROM table_name</code></p><h2 id="min-函数"><a href="#min-函数" class="headerlink" title="min()函数"></a>min()函数</h2><p>MIN 函数返回一列中的最小值。NULL 值不包括在计算中。<br><strong>SQL MIN() 语法</strong><br><code>SELECT MIN(column_name) FROM table_name</code><br><strong>注释：</strong>MIN 和 MAX 也可用于文本列，以获得按字母顺序排列的最高或最低值。</p><h2 id="sum-函数"><a href="#sum-函数" class="headerlink" title="sum()函数"></a>sum()函数</h2><p>SUM 函数返回数值列的总数（总额）。<br><strong>SQL SUM() 语法</strong><br><code>SELECT SUM(column_name) FROM table_name</code></p><h2 id="first-函数"><a href="#first-函数" class="headerlink" title="first()函数"></a>first()函数</h2><p>FIRST() 函数返回指定的字段中第一个记录的值。</p><p>提示：可使用 ORDER BY 语句对记录进行排序。<br><strong>SQL FIRST() 语法</strong><br><code>SELECT FIRST(column_name) FROM table_name</code></p><h2 id="list-函数"><a href="#list-函数" class="headerlink" title="list()函数"></a>list()函数</h2><p>LAST() 函数返回指定的字段中最后一个记录的值。</p><p>提示：可使用 ORDER BY 语句对记录进行排序。<br><strong>SQL LAST() 语法</strong><br><code>SELECT LAST(column_name) FROM table_name</code></p><h2 id="Group-By函数"><a href="#Group-By函数" class="headerlink" title="Group By函数"></a>Group By函数</h2><p>GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组。<br><strong>SQL GROUP BY 语法</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">,</span> aggregate_function<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_name operator <span class="token keyword">value</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>我们拥有下面这个 “stuinfo” 表：</p><table><thead><tr><th>id</th><th>date</th><th>name</th><th>age</th><th>ach</th><th>tuition</th><th>sex</th></tr></thead><tbody><tr><td>1</td><td>2019-10-17 17:44:45</td><td>亚索</td><td>18</td><td>84</td><td>10600</td><td>男</td></tr><tr><td>2</td><td>2018-10-17 17:45:42</td><td>寒冰</td><td>16</td><td>95</td><td>10600</td><td>女</td></tr><tr><td>3</td><td>2019-08-01 17:45:34</td><td>布隆</td><td>10</td><td>84</td><td>10000</td><td>男</td></tr><tr><td>4</td><td>2019-01-17 17:46:42</td><td>劫</td><td>23</td><td>99</td><td>500</td><td>男</td></tr><tr><td>5</td><td>2019-10-13 17:46:52</td><td>小鱼儿</td><td>45</td><td>84</td><td>6000</td><td>女</td></tr></tbody></table><p>现在我们希望查找男生和女生的总分数并想要使用 GROUP BY 进行组合。<br>我们使用下列 SQL 语句：<br><code>select sex,sum(ach) from stuinfo group by sex;</code><br>结果：</p><table><thead><tr><th>sex</th><th>sum(ach)</th></tr></thead><tbody><tr><td>女</td><td>179</td></tr><tr><td>男</td><td>267</td></tr></tbody></table><h2 id="Having"><a href="#Having" class="headerlink" title="Having();"></a>Having();</h2><p>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与合计函数一起使用。<br><strong>SQL HAVING 语法</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> column_name<span class="token punctuation">,</span> aggregate_function<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> column_name operator <span class="token keyword">value</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column_name<span class="token keyword">HAVING</span> aggregate_function<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> operator <span class="token keyword">value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo安装教程</title>
      <link href="/2019/10/16/Hexo/"/>
      <url>/2019/10/16/Hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="安装hexo基础框架"><a href="#安装hexo基础框架" class="headerlink" title="安装hexo基础框架"></a>安装hexo基础框架</h2><pre><code>npm install hexo-cli -g</code></pre><h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><p>我是用windows系统，打开cmd然后进入到你的博客文件目录，输入以下命令</p><pre><code>hexo cleanhexo ghexo d</code></pre><h2 id="网易云音乐外链"><a href="#网易云音乐外链" class="headerlink" title="网易云音乐外链"></a>网易云音乐外链</h2><pre><code>https://music.163.com/song/media/outer/url?id=484365611.mp3</code></pre><h2 id="清空git缓存"><a href="#清空git缓存" class="headerlink" title="清空git缓存"></a>清空git缓存</h2><pre><code>git rm -r --cached .git gc</code></pre><h2 id="更换仓库："><a href="#更换仓库：" class="headerlink" title="更换仓库："></a>更换仓库：</h2><pre><code>git remote -vgit remote set-url origin 新仓库git remote set-url origin https://github.com/xiu0928/love.git</code></pre><h2 id="查看当前用户名和邮箱"><a href="#查看当前用户名和邮箱" class="headerlink" title="查看当前用户名和邮箱"></a>查看当前用户名和邮箱</h2><pre><code>git config user.namegit config user.email</code></pre><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><pre><code>git config --global user.name &quot;xiu0928&quot;git config --global user.email &quot;2011447576@qq.com&quot;</code></pre><h2 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h2><pre><code>git initgit add . git commit -m &quot;first commit&quot;git remote add origin https://自己的仓库url地址（上面有说到） 将本地的仓库关联到github上，git push -u origin master</code></pre><h2 id="更新到GitHub上"><a href="#更新到GitHub上" class="headerlink" title="更新到GitHub上"></a>更新到GitHub上</h2><pre><code>hexo cleanhexo generatehexo deploy</code></pre><h2 id="更新到GitHub上-1"><a href="#更新到GitHub上-1" class="headerlink" title="更新到GitHub上"></a>更新到GitHub上</h2><pre><code>git clone https://github.com/xiu0928/xiu0928.github.io .deploy/xiu0928.github.iohexo generate   cp -R public/* .deploy/xiu0928.github.io  cd .deploy/xiu0928.github.io git add .  git commit -m &quot;update&quot; git push </code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Hexo -技术 -Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础</title>
      <link href="/2019/10/16/SQL%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/16/SQL%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL-语法"><a href="#SQL-语法" class="headerlink" title="SQL 语法"></a>SQL 语法</h2><h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><p>一个数据库通常包含一个或多个表。每个表由一个名字标识（例如“客户”或者“订单”）。表包含带有数据的记录（行）</p><h3 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h3><p>您需要在数据库上执行的大部分工作都由 SQL 语句完成。<br>下面的语句从表中选取 LastName 列的数据：<br><code>SELECT LastName FROM Persons</code><br>重要事项：SQL 对大小写不敏感！</p><h3 id="SQL-DML-和-DDL"><a href="#SQL-DML-和-DDL" class="headerlink" title="SQL DML 和 DDL"></a>SQL DML 和 DDL</h3><p>可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。<br>SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。</p><p>查询和更新指令构成了 SQL 的 DML 部分：</p><ul><li>SELECT - 从数据库表中获取数据</li><li>UPDATE - 更新数据库表中的数据</li><li>DELETE - 从数据库表中删除数据</li><li>INSERT INTO - 向数据库表中插入数据</li></ul><hr><p>SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。<br>SQL 中最重要的 DDL 语句:</p><hr><ul><li>CREATE DATABASE - 创建新数据库</li><li>ALTER DATABASE - 修改数据库</li><li>CREATE TABLE - 创建新表</li><li>ALTER TABLE - 变更（改变）数据库表</li><li>DROP TABLE - 删除表</li><li>CREATE INDEX - 创建索引（搜索键）</li><li>DROP INDEX - 删除索引</li></ul><hr><h2 id="SQL-SELECT-语句"><a href="#SQL-SELECT-语句" class="headerlink" title="SQL SELECT 语句"></a>SQL SELECT 语句</h2><p>SELECT 语句用于从表中选取数据。</p><p>结果被存储在一个结果表中（称为结果集）。</p><h3 id="SQL-SELECT-语法"><a href="#SQL-SELECT-语法" class="headerlink" title="SQL SELECT 语法"></a>SQL SELECT 语法</h3><p><code>SELECT 列名称 FROM 表名称</code><br>以及：<br><code>SELECT * FROM 表名称</code></p><h2 id="SQL-SELECT-DISTINCT-语句"><a href="#SQL-SELECT-DISTINCT-语句" class="headerlink" title="SQL SELECT DISTINCT 语句"></a>SQL SELECT DISTINCT 语句</h2><p>在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。</p><p>关键词 DISTINCT 用于返回唯一不同的值。<br><strong>语法：</strong><br><code>SELECT DISTINCT 列名称 FROM 表名称</code></p><h2 id="SQL-WHERE-子句"><a href="#SQL-WHERE-子句" class="headerlink" title="SQL WHERE 子句"></a>SQL WHERE 子句</h2><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。<br><strong>语法:</strong><br><code>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</code><br>下面的运算符可在 WHERE 子句中使用：</p><table><thead><tr><th>操作符</th><th>描述</th><th></th><th></th></tr></thead><tbody><tr><td>=</td><td>等于</td><td></td><td></td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td></td><td></td></tr><tr><td>&gt;</td><td>大于</td><td></td><td></td></tr><tr><td>&lt;</td><td>小于</td><td></td><td></td></tr><tr><td>&gt;=</td><td>大于等于</td><td></td><td></td></tr><tr><td>&lt;=</td><td>小于等于</td><td></td><td></td></tr><tr><td>BETWEEN</td><td>在某个范围内</td><td></td><td></td></tr><tr><td>LIKE</td><td>搜索某种模式</td><td></td><td></td></tr></tbody></table><p><strong>注释：</strong>在某些版本的 SQL 中，操作符 &lt;&gt; 可以写为 !=</p><h2 id="SQL-AND-amp-OR-运算符"><a href="#SQL-AND-amp-OR-运算符" class="headerlink" title="SQL AND &amp; OR 运算符"></a>SQL AND &amp; OR 运算符</h2><p>AND 和 OR 运算符用于基于一个以上的条件对记录进行过滤。<br>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。</p><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</p><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。<br><strong>AND 运算符实例</strong><br>使用 AND 来显示所有姓为 “Carter” 并且名为 “Thomas” 的人：<br><code>SELECT * FROM Persons WHERE FirstName=&#39;Thomas&#39; AND LastName=&#39;Carter&#39;</code><br><strong>OR 运算符实例</strong><br>使用 OR 来显示所有姓为 “Carter” 或者名为 “Thomas” 的人：<br><code>SELECT * FROM Persons WHERE firstname=&#39;Thomas&#39; OR lastname=&#39;Carter&#39;</code><br><strong>结合 AND 和 OR 运算符</strong><br>我们也可以把 AND 和 OR 结合起来（使用圆括号来组成复杂的表达式）:<br><code>SELECT * FROM Persons WHERE (FirstName=&#39;Thomas&#39; OR FirstName=&#39;William&#39;)AND LastName=&#39;Carter&#39;</code></p><h2 id="SQL-ORDER-BY-子句"><a href="#SQL-ORDER-BY-子句" class="headerlink" title="SQL ORDER BY 子句"></a>SQL ORDER BY 子句</h2><p><strong>ORDER BY 语句用于对结果集进行排序。</strong><br>ORDER BY 语句用于根据指定的列对结果集进行排序。</p><p>ORDER BY 语句默认按照升序对记录进行排序。</p><p>如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h3><p>以字母顺序显示公司名称：<br><code>SELECT Company, OrderNumber FROM Orders ORDER BY Company</code></p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h3><p>以字母顺序显示公司名称（Company），并以数字顺序显示顺序号（OrderNumber）：<br><code>SELECT Company, OrderNumber FROM Orders ORDER BY Company, OrderNumber</code></p><h2 id="SQL-INSERT-INTO-语句"><a href="#SQL-INSERT-INTO-语句" class="headerlink" title="SQL INSERT INTO 语句"></a>SQL INSERT INTO 语句</h2><p>INSERT INTO 语句用于向表格中插入新的行。<br><strong>语法</strong><br><code>INSERT INTO 表名称 VALUES (值1, 值2,....)</code><br>我们也可以指定所要插入数据的列：<br><code>INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)</code></p><h3 id="插入新的行"><a href="#插入新的行" class="headerlink" title="插入新的行"></a>插入新的行</h3><p><strong>“Persons” 表：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td></tr></tbody></table><p><strong>SQL 语句：</strong><br><code>INSERT INTO Persons VALUES (&#39;Gates&#39;, &#39;Bill&#39;, &#39;Xuanwumen 10&#39;, &#39;Beijing&#39;)</code><br><strong>结果：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td></tr><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr></tbody></table><h3 id="在指定的列中插入数据"><a href="#在指定的列中插入数据" class="headerlink" title="在指定的列中插入数据"></a>在指定的列中插入数据</h3><p><strong>“Persons” 表：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td></tr><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr></tbody></table><p><strong>SQL 语句：</strong><br><code>INSERT INTO Persons (LastName, Address) VALUES (&#39;Wilson&#39;, &#39;Champs-Elysees&#39;)</code><br><strong>结果：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Carter</td><td>Thomas</td><td>Changan Street</td><td>Beijing</td></tr><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td></td><td>Champs-Elysees</td><td></td></tr></tbody></table><h2 id="Update-语句"><a href="#Update-语句" class="headerlink" title="Update 语句"></a>Update 语句</h2><p>Update 语句用于修改表中的数据。<br><strong>语法：</strong><br><code>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</code></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>Person:</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td></td><td>Champs-Elysees</td><td></td></tr></tbody></table><p><strong>更新某一行中的一个列</strong><br>我们为 lastname 是 “Wilson” 的人添加 firstname：<br><code>UPDATE Person SET FirstName = &#39;Fred&#39; WHERE LastName = &#39;Wilson&#39;</code><br><strong>结果：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td>Fred</td><td>Champs-Elysees</td><td></td></tr></tbody></table><p><strong>更新某一行中的若干列</strong><br>我们会修改地址（address），并添加城市名称（city）：<br><code>UPDATE Person SET Address = &#39;Zhongshan 23&#39;, City = &#39;Nanjing&#39;WHERE LastName = &#39;Wilson&#39;</code><br><strong>结果：</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td>Fred</td><td>Zhongshan 23</td><td>Nanjing</td></tr></tbody></table><h2 id="SQL-DELETE-语句"><a href="#SQL-DELETE-语句" class="headerlink" title="SQL DELETE 语句"></a>SQL DELETE 语句</h2><p>DELETE 语句用于删除表中的行。<br><strong>语法</strong><br><code>DELETE FROM 表名称 WHERE 列名称 = 值</code><br><strong>Person:</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr><tr><td>Wilson</td><td>Fred</td><td>Zhongshan 23</td><td>Nanjing</td></tr></tbody></table><p><strong>删除某行</strong><br>“Fred Wilson” 会被删除：<br><code>DELETE FROM Person WHERE LastName = &#39;Wilson&#39;</code><br><strong>结果:</strong></p><table><thead><tr><th>LastName</th><th>FirstName</th><th>Address</th><th>City</th></tr></thead><tbody><tr><td>Gates</td><td>Bill</td><td>Xuanwumen 10</td><td>Beijing</td></tr></tbody></table><p><strong>删除所有行</strong><br>可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：<br><code>DELETE FROM table_name</code><br>或者：<br><code>DELETE * FROM table_name</code></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -SQL -技术 -基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇淫巧技</title>
      <link href="/2019/10/16/%E5%A5%87%E6%B7%AB%E5%B7%A7%E6%8A%80/"/>
      <url>/2019/10/16/%E5%A5%87%E6%B7%AB%E5%B7%A7%E6%8A%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Dos代码雨"><a href="#Dos代码雨" class="headerlink" title="Dos代码雨"></a>Dos代码雨</h2><pre class="line-numbers language-Dos"><code class="language-Dos">@echo offcolor 0a:startset num=0set "echos= ":numset /a a1=%random%%%3if "%a1%" == "1" set "a1= "if "%a1%" == "2" set "a1= "if "%a1%" == "0" set /a a1=%random%%%2set echos=%echos%%a1%set /a num=%num%+1if "%num%" == "75" echo %echos%&&goto :startgoto :num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL查看表的所有列"><a href="#MySQL查看表的所有列" class="headerlink" title="MySQL查看表的所有列"></a>MySQL查看表的所有列</h2><p><code>show full columns from [table]</code></p><h2 id="JavaScript删除数组"><a href="#JavaScript删除数组" class="headerlink" title="JavaScript删除数组"></a>JavaScript删除数组</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="特别简单的取整技巧"><a href="#特别简单的取整技巧" class="headerlink" title="特别简单的取整技巧"></a>特别简单的取整技巧</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">5.6664</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Dos -技术 -巧记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java总结</title>
      <link href="/2019/10/16/Java%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/16/Java%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Java开篇"><a href="#Java开篇" class="headerlink" title="Java开篇"></a>Java开篇</h2><p>javaSE（标准版） javaEE（企业版） javaME（微型版）</p><p>JDK（java开发工具包）JRE（java运行环境）IDE（集成开发环境）</p><p>Java SE（Java Platform，Standard Edition）。Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java Platform，Enterprise Edition（Java EE）提供基础。 J2SE就是做那种桌面安装程序样的，像QQ，WORD那种应用程序。<br>Java EE（Java Platform，Enterprise Edition）。这个版本以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web 2.0 应用程序。 J2EE 就是做基于Internet的应用程序，像选课系统，企业网站，银行系统之类的。<br>Java ME（Java Platform，Micro Edition）。这个版本以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。 J2ME就是做嵌入式系统开发的，像手机游戏之类的，像现在流行的Android操作系统。<br>JDK（Java Development Kit）。<br>JRE（Java Runtime Environment）<br>IDE（Ind Depvelopment Environment）</p><p>##一、面向对象</p><h3 id="类、对象、变量"><a href="#类、对象、变量" class="headerlink" title="类、对象、变量"></a>类、对象、变量</h3><p>（1）所有的Java程序都已类class为组织单元；类由属性和方法两部分组成<br>（2）先创建对象，再使用对象<br>（3）成员变量：类中定义，自动定义初始值<br>局部变量：类方法中定义（两变量同名，局部变量有更高的优先级）</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法是定义在java类中的一个用来初始化对象的方法，与类同名且没有返回值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> 构造方法名（）<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中构造方法名与类同名；当没有指定的构造方法时，系统会自动添加无参构造方法</p><h3 id="Static使用"><a href="#Static使用" class="headerlink" title="Static使用"></a>Static使用</h3><p>Static修饰的成员属于整个类，被类的所有对象共享。可通过使用类名直接访问静态成员，也可通过对象名<br>Static可以修饰变量、方法和代码块</p><h4 id="（1）Static使用之静态方法"><a href="#（1）Static使用之静态方法" class="headerlink" title="（1）Static使用之静态方法"></a>（1）Static使用之静态方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Helloworld</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Helloworld<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Helloworld demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helloworld</span><span class="token punctuation">;</span>    demo<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：静态方法中可以直接调用同类的静态成员，但不可以直接调用非静态成员；普通成员方法中可以直接访问同类的非静态变量和静态变量；静态方法中不能直接调用非静态成员方法</p><h4 id="（2）Static使用之静态初始化块"><a href="#（2）Static使用之静态初始化块" class="headerlink" title="（2）Static使用之静态初始化块"></a>（2）Static使用之静态初始化块</h4><p>静态初始化块在类加载时执行，且只会执行一次，同时静态初始化块只能给静态变量赋值，不能初始化普通成员</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Helloworld</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num1<span class="token punctuation">;</span><span class="token keyword">int</span> num2<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> num3<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    num1 <span class="token operator">=</span> <span class="token number">91</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法为num1赋值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num2 <span class="token operator">=</span> <span class="token number">74</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化块为num2赋值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    num3 <span class="token operator">=</span> <span class="token number">83</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态初始化块为num3赋值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Helloworld hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>    Helloworld hello2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：静态初始化块为num3赋值<br>初始化块为num2赋值<br>构造方法为num1赋值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">91</span><span class="token number">74</span><span class="token number">83</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>初始化块为num2赋值<br>构造方法为num1赋值</p><h2 id="二、java面向对象的特性"><a href="#二、java面向对象的特性" class="headerlink" title="二、java面向对象的特性"></a>二、java面向对象的特性</h2><p>封装性：将类的某些信息隐藏在内部，通过类的方法来实现操作访问<br>步骤：<br>1 修改属性可见性；<br>2 创建getter\setter方法；<br>3在方法中加入属性控制语句</p><h3 id="1-静态内部类"><a href="#1-静态内部类" class="headerlink" title="(1)静态内部类:"></a>(1)静态内部类:</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SOuter</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SInner</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问外部类b"</span> <span class="token operator">+</span> SOuter<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问内部类b"</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//三行表示</span>    SInner sInner<span class="token punctuation">;</span>    sInner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sInner<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两行表示</span>    SInner si <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    si<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//一行表示</span>    <span class="token keyword">new</span> <span class="token class-name">SInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)成员内部类：访问外部类时使用this指针<br>（3）方法内部类：只能在该方法中使用，且不能使用访问控制符和Static修饰符</p><h2 id="2-继承性"><a href="#2-继承性" class="headerlink" title="2. 继承性"></a>2. 继承性</h2><p>（1）一般形式：class 子类 extends 父类<br>（2）方法重写：子类对继承的父类方法不满意可以重写，调用时优先调用子类方法<br>（3）继承的初始化顺序：先初始化父类，再到子类；先执行初始化对象中属性，再执行狗在方法中的初始化<br>（4）父类对象–属性初始化–构造方法–子类对象–属性初始化–构造方法<br>（5）注意：如果子类构造方法中没有显示调用父类的构造方法，默认调用父类无参构造方法，若此父类没用无参的构造方法，则编译出错</p><p>多态性<br>引用多态：父类的引用可以指向本类的对象，也可指向子类的对象<br>方法多态：创建本类对象时，调用的方法为本类方法；创建子类对象时，调用的方法为子类的重写的方法或者继承的方法</p><h3 id="（1）抽象类"><a href="#（1）抽象类" class="headerlink" title="（1）抽象类"></a>（1）抽象类</h3><p>用关键字abstract修饰：抽象类只用声明不需要实现；包含抽象方法的类为抽象类；抽象类不能直接创建，可以定义引用变量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Telphone</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抽象方法没有方法体，以分号结束</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="（2）接口（一种特殊的类，有全局变量和公共抽象方法组成）"><a href="#（2）接口（一种特殊的类，有全局变量和公共抽象方法组成）" class="headerlink" title="（2）接口（一种特殊的类，有全局变量和公共抽象方法组成）"></a>（2）接口（一种特殊的类，有全局变量和公共抽象方法组成）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 类名 <span class="token keyword">extends</span> 父类implemrnts 接口<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>……<span class="token punctuation">{</span>类体部分<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注：接口经常与匿名内部类配合使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iplay</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Iplay</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>People test<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“手机可以玩游戏”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-String、StringBuilder、StringBuffer的区别是什么，String为什么是不可变的？"><a href="#1-String、StringBuilder、StringBuffer的区别是什么，String为什么是不可变的？" class="headerlink" title="1.String、StringBuilder、StringBuffer的区别是什么，String为什么是不可变的？"></a>1.String、StringBuilder、StringBuffer的区别是什么，String为什么是不可变的？</h2><h3 id="不可变性"><a href="#不可变性" class="headerlink" title="不可变性"></a>不可变性</h3><p>String类的底层源码中，通过final关键字修饰字符串数组，private final char value[]，所以是不可变的。StringBuffer和StringBuilder类是集成自 AbstractStringBuilder 类， AbstractStringBuilder 类中的变量没有用final关键字修饰，所以是可变的。</p><h3 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>String是不可变的，是常量，所以是线程安全的。StringBuilder和StringBuffer都继承自AbstractStringBuilder 类，StringBuffer对方法加了同步锁，所以是线程安全的，而StringBuilder没有加同步锁，所以是线程不安全的。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>对String类型进行改变是都会new一个新的string对象，并指向新的对象；</p><p>StringBuffer直接通过改变自身变量的值，StringBuilder相对能提升性能，但有线程不安全的情况。</p><h2 id="2-与-equals"><a href="#2-与-equals" class="headerlink" title="2.== 与 equals"></a>2.== 与 equals</h2><p>==用来判断两个对象是否相等，基础数据类型比较的是值是否相等。</p><p>没有重写对象的equals方法时，也是用来比较两个对象是否相等，重写equals方法可以比较内容相等，返回true</p><h2 id="3-try-catch-finally中finally是否一定执行"><a href="#3-try-catch-finally中finally是否一定执行" class="headerlink" title="3.try/catch/finally中finally是否一定执行"></a>3.try/catch/finally中finally是否一定执行</h2><p>在以下4种特殊情况下，finally块不会被执行:</p><p>在finally语句块中发生了异常。</p><p>在前面的代码中用了System.exit()退出程序。</p><p>程序所在的线程死亡。</p><p>关闭CPU。</p><h2 id="4-接口和抽象类的区别？"><a href="#4-接口和抽象类的区别？" class="headerlink" title="4.接口和抽象类的区别？"></a>4.接口和抽象类的区别？</h2><p>1.抽象类中可以实现方法，抽象接口不能实现方法（jdk1.8以后可以实现方法）；</p><p>2.接口中的变量默认是final类型，而抽象类不是；</p><p>3.类只能继承一个抽象类，而接口可以实现多个；</p><p>4.类继承接口需要实现所有方法，抽象类不需要；</p><h2 id="5-接口不能用new实例化，可以声明。必须引用一个实现该接口的对象抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。"><a href="#5-接口不能用new实例化，可以声明。必须引用一个实现该接口的对象抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。" class="headerlink" title="5.接口不能用new实例化，可以声明。必须引用一个实现该接口的对象抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。"></a>5.接口不能用new实例化，可以声明。必须引用一个实现该接口的对象抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</h2><p>5.Arraylist 与 LinkedList 异同<br>安全性<br>ArrayList与LinkedList都是线程不安全的。</p><p>数据结构实现<br>ArryayList是基于Object数组，而LinkedList是基于双向循环链表（JDK1.6之前为循环链表，之后取消了循环）</p><p>插入删除的影响<br>ArrayList采用数组存储，插入删除受元素位置的影响；</p><p>LinkedList采用链表存储，插入删除不收元素位置影响；</p><p>访问元素<br>LinkedList 不支持高效的随机元素访问，而 ArrayList 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于get(int index)方法)。</p><p>实现了RandomAccess接口的list，优先选择普通for循环 ，其次foreach,未实现RandomAccess接口的list， 优先选择iterator遍历(foreach遍历底层也是通过iterator实现的)，大size的数据，千万不要使用普通for循环</p><h2 id="6-ArrayList-与-Vector-区别"><a href="#6-ArrayList-与-Vector-区别" class="headerlink" title="6.ArrayList 与 Vector 区别"></a>6.ArrayList 与 Vector 区别</h2><p>Vector中所有方法都是同步的，在多线程操作中，同步操作会耗费时间，而ArrayList是不需要同步的，在不需要考虑线程安全时可以使用。</p><h2 id="7-HashMap的底层实现"><a href="#7-HashMap的底层实现" class="headerlink" title="7.HashMap的底层实现"></a>7.HashMap的底层实现</h2><p>待补充完善</p><h2 id="8-HashSet-和-HashMap-区别"><a href="#8-HashSet-和-HashMap-区别" class="headerlink" title="8.HashSet 和 HashMap 区别"></a>8.HashSet 和 HashMap 区别</h2><p>HashMap实现Map接口，用来存储键值对，调用put方法添加元素，使用Key计算Hashcode，而HashSet实现Set接口，用来存储对象，调用add方法添加对象，使用对象计算hashcode，根据equals方法判断对象相等，执行效率的话，HashMap优与HashSet。</p><h2 id="9-ConcurrentHashMap-和-Hashtable-的区别"><a href="#9-ConcurrentHashMap-和-Hashtable-的区别" class="headerlink" title="9.ConcurrentHashMap 和 Hashtable 的区别"></a>9.ConcurrentHashMap 和 Hashtable 的区别</h2><p>ConcurrentHashMap 和 HashTable 的区别主要体现在实现线程安全的方式上不同。ConcurrentHashMap使用的是分段锁，HashTable使用的是同一把锁，因而在多线程并发中效率很低。</p><h2 id="10-多线程实现方式"><a href="#10-多线程实现方式" class="headerlink" title="10.多线程实现方式"></a>10.多线程实现方式</h2><p>1.继承Thread类，2.实现Runnable接口，3.基于线程池实现</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -java -技术 -总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
